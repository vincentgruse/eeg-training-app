"use strict";const n=require("electron"),i=require("path"),l=require("fs"),h=require("child_process"),w=()=>{n.ipcMain.handle("stimulus:saveSessionData",async(r,o,e)=>{try{const s=process.env.APP_ROOT||n.app.getAppPath(),a=i.join(s,"data");l.existsSync(a)||l.mkdirSync(a,{recursive:!0});const p=i.join(a,e);return l.writeFileSync(p,o),console.log(`Session data automatically saved to: ${p}`),{success:!0,path:p}}catch(s){return console.error("Failed to save session data:",s),{success:!1,message:s instanceof Error?s.message:"Unknown error occurred"}}})},m=()=>{n.ipcMain.handle("eeg:browseForFile",async()=>{try{const r=await n.dialog.showOpenDialog({properties:["openFile"],title:"Select OpenBCI EEG Data File",filters:[{name:"OpenBCI Data",extensions:["txt","csv"]},{name:"All Files",extensions:["*"]}]});return r.canceled||r.filePaths.length===0?{success:!1}:{success:!0,filePath:r.filePaths[0]}}catch(r){return console.error("Error browsing for file:",r),{success:!1,error:r instanceof Error?r.message:"Unknown error"}}}),n.ipcMain.handle("eeg:processData",async(r,o)=>{try{if(!l.existsSync(o))return console.error(`EEG data file not found: ${o}`),{success:!1,error:`EEG data file not found: ${o}`};const e=i.resolve(__dirname,"../resources/eeg_processor.py");if(!l.existsSync(e))return console.error(`EEG processor script not found at: ${e}`),{success:!1,error:`EEG processor script not found at: ${e}`};const s=i.join(process.env.APP_ROOT||n.app.getAppPath(),"data");let a=y(s);if(!a)return console.error(`No participant info files found in ${s}`),{success:!1,error:`No participant info files found in ${s}`};console.log("Launching EEG processor script..."),console.log(`Script path: ${e}`),console.log(`EEG data file: ${o}`),console.log(`Participant info file: ${a}`);const p=h.spawn("python",[e,"--eeg",o,"--participant",a]);let d="",f="";return p.stdout.on("data",u=>{const c=u.toString();d+=c,console.log(`EEG Processor: ${c.trim()}`)}),p.stderr.on("data",u=>{const c=u.toString();f+=c,console.error(`EEG Processor Error: ${c.trim()}`)}),new Promise(u=>{p.on("close",c=>{c===0?(console.log("EEG processing completed successfully"),u({success:!0,output:d})):(console.error(`EEG processing failed with code ${c}`),u({success:!1,error:f||`Process exited with code ${c}`}))})})}catch(e){return console.error("Failed to launch EEG processor:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}})};function y(r){if(!l.existsSync(r))return console.error(`Data directory ${r} does not exist`),null;const o=[];try{for(const e of l.readdirSync(r))if(e.startsWith("participant_")&&e.endsWith(".txt")){const s=i.join(r,e);o.push([s,l.statSync(s).mtimeMs])}}catch(e){return console.error("Error reading data directory:",e),null}return o.length===0?null:(o.sort((e,s)=>s[1]-e[1]),o[0][0])}process.env.DIST=i.join(__dirname,"../dist");process.env.VITE_PUBLIC=n.app.isPackaged?process.env.DIST:i.join(process.env.DIST,"../public");let t;const g=process.env.VITE_DEV_SERVER_URL;function E(){t=new n.BrowserWindow({width:1200,height:800,webPreferences:{preload:i.join(__dirname,"preload.js"),nodeIntegration:!1,contextIsolation:!0}}),t.maximize(),w(),m(),t.webContents.on("did-finish-load",()=>{t==null||t.webContents.send("main-process-message",new Date().toLocaleString())}),g?(t.loadURL(g),t.webContents.openDevTools()):t.loadFile(i.join(process.env.DIST,"index.html"))}n.app.on("window-all-closed",()=>{process.platform!=="darwin"&&(n.app.quit(),t=null)});n.app.whenReady().then(E);n.app.on("activate",()=>{const r=n.BrowserWindow.getAllWindows();r.length===0?E():r[0].focus()});
